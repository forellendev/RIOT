#include <math.h>
#include <stdio.h>
#include "parameters_12289_512.h"
#include "table_sampler.h"
#include "stdlib.h"
#include "des_prng.h"

// auxilary function as long as the real sampling is not implemented
int get_gauss_coeff(uint32_t x)
{


  //requires 24 bit of randomness
  uint16_t z;
  int sign;

  x = (uint32_t)x &  (uint32_t) 16777215;
  
  //Determine the sign
  if((x &0x1) == 1){
    sign = -1;
  }
  else{
    sign = 1;
  }

  if(x < 2754880 )
    {z = 0;}
  else if(x < 8149189 )
    {z =  1 ;}
  else if(x < 13211458 )
    {z =  2 ;}
  else if(x < 17765121 )
    {z =  3 ;}
  else if(x < 21691416 )
    {z =  4 ;}
  else if(x < 24936389 )
    {z =  5 ;}
  else if(x < 27507055 )
    {z =  6 ;}
  else if(x < 29459085 )
    {z =  7 ;}
  else if(x < 30879887 )
    {z =  8 ;}
  else if(x < 31871146 )
    {z =  9 ;}
  else if(x < 32534044 )
    {z =  10 ;}
  else if(x < 32958969 )
    {z =  11 ;}
  else if(x < 33220056 )
    {z =  12 ;}
  else if(x < 33373823 )
    {z =  13 ;}
  else if(x < 33460629 )
    {z =  14 ;}
  else if(x < 33507601 )
    {z =  15 ;}
  else if(x < 33531964 )
    {z =  16 ;}
  else if(x < 33544077 )
    {z =  17 ;}
  else if(x < 33549849 )
    {z =  18 ;}
  else if(x < 33552486 )
    {z =  19 ;}
  else if(x < 33553640 )
    {z =  20 ;}
  else if(x < 33554125 )
    {z =  21 ;}
  else if(x < 33554320 )
    {z =  22 ;}
  else if(x < 33554395 )
    {z =  23 ;}
  else if(x < 33554423 )
    {z =  24 ;}
  else if(x < 33554433 )
    {z =  25 ;}
  else
    {z =  26.0 ;}

  //Max val:  2**24-1
  if(sign ==-1){
    z= paramQ-z;
  }

  return z;




}


void get_gauss_poly_12289_512(uint16_t* retpoly, uint16_t add){
  //Generates or adds Gaussian noise to an array
  uint32_t temp;
  uint16_t val;

  for (uint16_t i = 0; i<paramN; i++){
    temp = get_random_bits25();
    val =  get_gauss_coeff(temp);

    if(add==1){
      retpoly[i] = retpoly[i]+val;
    }else{
      retpoly[i] = val;
    }

    if(retpoly[i]>paramQ){
		// substitute reduction with ASM code
      retpoly[i] = (retpoly[i])%paramQ;
    }
  }
}


void generateRandomPolyTable_12289_512(uint16_t* retpoly){

  for(int i = 0; i<paramN; i++)
    {
      retpoly[i] = get_random_bits25() % paramQ;
    }  
}
